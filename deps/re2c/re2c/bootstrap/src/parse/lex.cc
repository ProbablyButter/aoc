/* Generated by re2c 1.1.1 on Thu Jan 17 22:27:03 2019 */
#line 1 "../src/parse/lex.re"
#include <cstdint>
#include <stddef.h>
#include <string.h>
#include <algorithm>
#include <limits>
#include <string>

#include "src/options/msg.h"
#include "src/codegen/output.h"
#include "src/encoding/enc.h"
#include "src/parse/input.h"
#include "src/parse/ast.h"
#include "src/parse/scanner.h"
#include "src/parse/parse.h" // needed by "parser.h"
#include "src/parse/unescape.h"
#include "src/util/range.h"
#include "src/util/s_to_n32_unsafe.h"
#include "src/util/string_utils.h"
#include "src/parse/parser.h"

extern YYSTYPE yylval;

namespace re2c {

#define YYCTYPE   unsigned char
#define YYCURSOR  cur
#define YYLIMIT   lim
#define YYMARKER  mar
#define YYFILL(n) { if (!fill (n)) fatal("unexpected end of input"); }

#line 55 "../src/parse/lex.re"


#line 108 "../src/parse/lex.re"


Scanner::ParseMode Scanner::echo(Output &out)
{
    const char *x, *y;
    if (is_eof()) return Stop;

next:
    tok = cur;
loop:
    ptr = cur;

#line 50 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 18) YYFILL(18);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy4;
		} else {
			if (yych <= '\n') goto yy6;
			if (yych <= '\f') goto yy4;
			goto yy8;
		}
	} else {
		if (yych <= '%') {
			if (yych <= '$') goto yy4;
			goto yy9;
		} else {
			if (yych == '/') goto yy10;
			goto yy4;
		}
	}
	++YYCURSOR;
#line 205 "../src/parse/lex.re"
	{
        if (is_eof()) {
            out.wraw(tok, ptr);
            return Stop;
        }
        goto loop;
    }
#line 116 "src/parse/lex.cc"
yy4:
	++YYCURSOR;
yy5:
#line 224 "../src/parse/lex.re"
	{ goto loop; }
#line 122 "src/parse/lex.cc"
yy6:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy7:
#line 219 "../src/parse/lex.re"
	{
        next_line();
        goto loop;
    }
#line 136 "src/parse/lex.cc"
yy8:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy6;
	goto yy5;
yy9:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '{') goto yy16;
	goto yy5;
yy10:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '*') goto yy18;
	goto yy5;
yy11:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy13:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy7;
	} else {
		goto yy5;
	}
yy14:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy14;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy14;
		if (yych == 'l') goto yy19;
		goto yy13;
	}
yy16:
	++YYCURSOR;
#line 120 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        return Parse;
    }
#line 184 "src/parse/lex.cc"
yy18:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '!') goto yy20;
	goto yy13;
yy19:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy21;
	goto yy13;
yy20:
	yych = (YYCTYPE)*++YYCURSOR;
	switch (yych) {
	case 'g':	goto yy22;
	case 'h':	goto yy23;
	case 'i':	goto yy24;
	case 'm':	goto yy25;
	case 'r':	goto yy26;
	case 's':	goto yy27;
	case 't':	goto yy28;
	case 'u':	goto yy29;
	default:	goto yy13;
	}
yy21:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy30;
	goto yy13;
yy22:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy31;
	goto yy13;
yy23:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy32;
	goto yy13;
yy24:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy33;
	if (yych == 'n') goto yy34;
	goto yy13;
yy25:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy35;
	if (yych == 't') goto yy36;
	goto yy13;
yy26:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy37;
	if (yych == 'u') goto yy38;
	goto yy13;
yy27:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy39;
	goto yy13;
yy28:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'y') goto yy40;
	goto yy13;
yy29:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy41;
	goto yy13;
yy30:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy42;
	goto yy13;
yy31:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy43;
	goto yy13;
yy32:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy44;
	goto yy13;
yy33:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy45;
	goto yy13;
yy34:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy46;
	goto yy13;
yy35:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'x') goto yy47;
	goto yy13;
yy36:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy48;
	goto yy13;
yy37:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy49;
	goto yy13;
yy38:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy50;
	goto yy13;
yy39:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy51;
	goto yy13;
yy40:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy52;
	goto yy13;
yy41:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy53;
	goto yy13;
yy42:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy55;
	if (yych <= '9') goto yy13;
	goto yy55;
yy43:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy56;
	goto yy13;
yy44:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'd') goto yy57;
	goto yy13;
yy45:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy58;
	goto yy13;
yy46:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy59;
	goto yy13;
yy47:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy60;
	if (yych == 'n') goto yy61;
	goto yy13;
yy48:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy62;
	goto yy13;
yy49:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy16;
	goto yy13;
yy50:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy63;
	goto yy13;
yy51:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy64;
	goto yy13;
yy52:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy65;
	goto yy13;
yy53:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy66;
	goto yy13;
yy54:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy55:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy54;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy54;
		if (yych <= '0') goto yy13;
		if (yych <= '9') {
			yyt1 = YYCURSOR;
			goto yy67;
		}
		goto yy13;
	}
yy56:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy69;
	goto yy13;
yy57:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy70;
	goto yy13;
yy58:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy71;
	goto yy13;
yy59:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'u') goto yy72;
	goto yy13;
yy60:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy73;
	goto yy13;
yy61:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy74;
	goto yy13;
yy62:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy75;
	goto yy13;
yy63:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy76;
	goto yy13;
yy64:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy77;
	goto yy13;
yy65:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy78;
	goto yy13;
yy66:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy79;
	goto yy13;
yy67:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy67;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\t') goto yy80;
		if (yych <= '\n') goto yy82;
		goto yy13;
	} else {
		if (yych <= '\r') goto yy84;
		if (yych == ' ') goto yy80;
		goto yy13;
	}
yy69:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy85;
	goto yy13;
yy70:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy86;
	goto yy13;
yy71:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy87;
	goto yy13;
yy72:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'd') goto yy88;
	goto yy13;
yy73:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy89;
	goto yy13;
yy74:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy90;
	goto yy13;
yy75:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy91;
	goto yy13;
yy76:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy92;
	goto yy13;
yy77:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy93;
	goto yy13;
yy78:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy94;
	goto yy13;
yy79:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy95;
	goto yy13;
yy80:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy80;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy80;
		if (yych == '"') goto yy96;
		goto yy13;
	}
yy82:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 213 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr + 1);
        set_sourceline();
        goto next;
    }
#line 486 "src/parse/lex.cc"
yy84:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy82;
	goto yy13;
yy85:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy98;
	goto yy13;
yy86:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy99;
	goto yy13;
yy87:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy100;
	goto yy13;
yy88:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy101;
	goto yy13;
yy89:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy102;
	goto yy13;
yy90:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy103;
	goto yy13;
yy91:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy104;
	goto yy13;
yy92:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy105;
	goto yy13;
yy93:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy106;
	goto yy13;
yy94:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy107;
	goto yy13;
yy95:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy108;
	goto yy13;
yy96:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy96;
	}
	if (yych <= '\n') goto yy13;
	if (yych <= '"') goto yy109;
	goto yy110;
yy98:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy111;
	goto yy13;
yy99:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy112;
	goto yy13;
yy100:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy113;
	goto yy13;
yy101:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy114;
	goto yy13;
yy102:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy115;
	goto yy13;
yy103:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy117;
	goto yy13;
yy104:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy118;
	goto yy13;
yy105:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy119;
	goto yy13;
yy106:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy120;
	goto yy13;
yy107:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy121;
	goto yy13;
yy108:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy122;
	goto yy13;
yy109:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy82;
	if (yych == '\r') goto yy84;
	goto yy13;
yy110:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy13;
	if (yych == '\n') goto yy13;
	goto yy96;
yy111:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy124;
	goto yy13;
yy112:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy125;
	goto yy13;
yy113:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy126;
	goto yy13;
yy114:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy127;
	goto yy13;
yy115:
	++YYCURSOR;
#line 141 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_yymaxfill();
        lex_end_of_comment(out);
        goto next;
    }
#line 626 "src/parse/lex.cc"
yy117:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'h') goto yy128;
	goto yy13;
yy118:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy129;
	goto yy13;
yy119:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy130;
	goto yy13;
yy120:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy131;
	goto yy13;
yy121:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy132;
	goto yy13;
yy122:
	++YYCURSOR;
#line 130 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        return Reuse;
    }
#line 654 "src/parse/lex.cc"
yy124:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy133;
	goto yy13;
yy125:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy134;
	goto yy13;
yy126:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy135;
	goto yy13;
yy127:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy136;
	goto yy13;
yy128:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy137;
	goto yy13;
yy129:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy138;
	goto yy13;
yy130:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy140;
	goto yy13;
yy131:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy142;
	goto yy13;
yy132:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy144;
	goto yy13;
yy133:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy146;
	goto yy13;
yy134:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy147;
	goto yy13;
yy135:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy148;
	goto yy13;
yy136:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy150;
	goto yy13;
yy137:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy151;
	goto yy13;
yy138:
	++YYCURSOR;
#line 177 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        lex_tags(out, true);
        goto next;
    }
#line 719 "src/parse/lex.cc"
yy140:
	++YYCURSOR;
#line 125 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        return Rules;
    }
#line 727 "src/parse/lex.cc"
yy142:
	++YYCURSOR;
#line 171 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        lex_tags(out, false);
        goto next;
    }
#line 736 "src/parse/lex.cc"
yy144:
	++YYCURSOR;
#line 162 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_line_info_output();
        out.wdelay_types();
        out.wdelay_line_info_input(get_line(), get_fname());
        lex_end_of_comment(out);
        goto next;
    }
#line 748 "src/parse/lex.cc"
yy146:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy152;
	goto yy13;
yy147:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy153;
	goto yy13;
yy148:
	++YYCURSOR;
#line 135 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        lex_end_of_comment(out);
        goto next;
    }
#line 765 "src/parse/lex.cc"
yy150:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy154;
	goto yy13;
yy151:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy155;
	goto yy13;
yy152:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy156;
	goto yy13;
yy153:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy158;
	goto yy13;
yy154:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '"') goto yy13;
	goto yy160;
yy155:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy161;
	goto yy13;
yy156:
	++YYCURSOR;
#line 155 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_state_goto(0);
        lex_end_of_comment(out);
        goto next;
    }
#line 799 "src/parse/lex.cc"
yy158:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'f') goto yy162;
	if (yych == 'n') goto yy163;
	goto yy13;
yy159:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy160:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy159;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy159;
		if (yych == '"') {
			yyt1 = YYCURSOR;
			goto yy165;
		}
		goto yy13;
	}
yy161:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy167;
	goto yy13;
yy162:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'f') goto yy169;
	goto yy13;
yy163:
	++YYCURSOR;
#line 183 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.header_mode(true);
        out.need_header = true;
        lex_end_of_comment(out);
        goto next;
    }
#line 839 "src/parse/lex.cc"
yy165:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy13;
		if (yych == '\n') goto yy13;
		goto yy165;
	} else {
		if (yych <= '"') goto yy171;
		if (yych == '\\') goto yy172;
		goto yy165;
	}
yy167:
	++YYCURSOR;
#line 148 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_yymaxnmatch();
        lex_end_of_comment(out);
        goto next;
    }
#line 862 "src/parse/lex.cc"
yy169:
	++YYCURSOR;
#line 191 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.header_mode(false);
        out.wdelay_line_info_input(get_line(), get_fname());
        lex_end_of_comment(out);
        goto next;
    }
#line 873 "src/parse/lex.cc"
yy171:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt2 = YYCURSOR;
			goto yy173;
		}
		goto yy13;
	} else {
		if (yych <= ' ') {
			yyt2 = YYCURSOR;
			goto yy173;
		}
		if (yych == '*') {
			yyt2 = YYCURSOR;
			goto yy175;
		}
		goto yy13;
	}
yy172:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy13;
	if (yych == '\n') goto yy13;
	goto yy165;
yy173:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy173;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy173;
		if (yych != '*') goto yy13;
	}
yy175:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy13;
	++YYCURSOR;
	x = yyt1;
	y = yyt2;
#line 199 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        include(getstr(x + 1, y - 1));
        goto next;
    }
#line 923 "src/parse/lex.cc"
}
#line 225 "../src/parse/lex.re"

}

void Scanner::lex_end_of_comment(Output &out)
{
    bool multiline = false;
loop:

#line 934 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy180;
		if (yych == '\n') goto yy184;
		goto yy182;
	} else {
		if (yych <= '\r') goto yy186;
		if (yych == '*') goto yy187;
		goto yy182;
	}
yy180:
	++YYCURSOR;
#line 234 "../src/parse/lex.re"
	{
        fatal_lc(get_line(), get_column(), "expected end of block");
    }
#line 954 "src/parse/lex.cc"
yy182:
	++YYCURSOR;
yy183:
#line 233 "../src/parse/lex.re"
	{ goto loop; }
#line 960 "src/parse/lex.cc"
yy184:
	++YYCURSOR;
#line 237 "../src/parse/lex.re"
	{
        next_line();
        multiline = true;
        goto loop;
    }
#line 969 "src/parse/lex.cc"
yy186:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy184;
	goto yy183;
yy187:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy183;
	++YYCURSOR;
#line 242 "../src/parse/lex.re"
	{
        if (multiline) {
            out.wdelay_line_info_input(get_line(), get_fname());
        }
        return;
    }
#line 985 "src/parse/lex.cc"
}
#line 248 "../src/parse/lex.re"

}

void Scanner::lex_tags(Output &out, bool mtags)
{
    std::string fmt, sep;
loop:

#line 996 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 9) YYFILL(9);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy194;
	}
	if (yych <= ')') {
		if (yych <= '\n') {
			if (yych >= '\t') goto yy197;
		} else {
			if (yych == '\r') goto yy199;
		}
	} else {
		if (yych <= 'f') {
			if (yych <= '*') goto yy200;
			if (yych >= 'f') goto yy201;
		} else {
			if (yych == 's') goto yy202;
		}
	}
	++YYCURSOR;
yy193:
#line 256 "../src/parse/lex.re"
	{
        fatal_lc(get_line(), get_column(), "unrecognized configuration");
    }
#line 1058 "src/parse/lex.cc"
yy194:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy194;
	}
#line 267 "../src/parse/lex.re"
	{
        goto loop;
    }
#line 1070 "src/parse/lex.cc"
yy197:
	++YYCURSOR;
#line 270 "../src/parse/lex.re"
	{
        next_line();
        goto loop;
    }
#line 1078 "src/parse/lex.cc"
yy199:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy197;
	goto yy193;
yy200:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy203;
	goto yy193;
yy201:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'o') goto yy205;
	goto yy193;
yy202:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'e') goto yy207;
	goto yy193;
yy203:
	++YYCURSOR;
#line 274 "../src/parse/lex.re"
	{
        out.wdelay_tags(new ConfTags(fmt, sep), mtags);
        return;
    }
#line 1102 "src/parse/lex.cc"
yy205:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy208;
yy206:
	YYCURSOR = YYMARKER;
	goto yy193;
yy207:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy209;
	goto yy206;
yy208:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy210;
	goto yy206;
yy209:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy211;
	goto yy206;
yy210:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy212;
	goto yy206;
yy211:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy213;
	goto yy206;
yy212:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy214;
	goto yy206;
yy213:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy216;
	goto yy206;
yy214:
	++YYCURSOR;
#line 259 "../src/parse/lex.re"
	{
        fmt = lex_conf_string();
        goto loop;
    }
#line 1144 "src/parse/lex.cc"
yy216:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 't') goto yy206;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'o') goto yy206;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy206;
	++YYCURSOR;
#line 263 "../src/parse/lex.re"
	{
        sep = lex_conf_string();
        goto loop;
    }
#line 1158 "src/parse/lex.cc"
}
#line 278 "../src/parse/lex.re"

}

int Scanner::scan()
{
    const char *p;
scan:
    tok = cur;

#line 1170 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 144,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		144, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy225;
	}
	if (yych <= '9') {
		if (yych <= '%') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy223;
				if (yych <= '\n') goto yy228;
				if (yych >= '\r') goto yy230;
			} else {
				if (yych <= '"') {
					if (yych >= '"') goto yy231;
				} else {
					if (yych <= '#') goto yy233;
					if (yych <= '$') goto yy234;
					goto yy236;
				}
			}
		} else {
			if (yych <= '*') {
				if (yych <= '&') goto yy223;
				if (yych <= '\'') goto yy237;
				if (yych <= ')') goto yy234;
				goto yy239;
			} else {
				if (yych <= '-') {
					if (yych <= '+') goto yy234;
				} else {
					if (yych <= '.') goto yy240;
					if (yych <= '/') goto yy242;
				}
			}
		}
	} else {
		if (yych <= '[') {
			if (yych <= '=') {
				if (yych <= ':') goto yy243;
				if (yych <= ';') goto yy234;
				if (yych <= '<') goto yy244;
				goto yy246;
			} else {
				if (yych <= '?') {
					if (yych >= '?') goto yy234;
				} else {
					if (yych <= '@') goto yy233;
					if (yych <= 'Z') goto yy247;
					goto yy250;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych <= '^') {
					if (yych <= '\\') goto yy234;
				} else {
					if (yych != '`') goto yy247;
				}
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy252;
					goto yy247;
				} else {
					if (yych <= '{') goto yy253;
					if (yych <= '|') goto yy234;
				}
			}
		}
	}
yy223:
	++YYCURSOR;
yy224:
#line 402 "../src/parse/lex.re"
	{
        fatal_lc(get_line(), get_column(), "unexpected character: '%c'", *tok);
        goto scan;
    }
#line 1285 "src/parse/lex.cc"
yy225:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy225;
	}
#line 384 "../src/parse/lex.re"
	{ goto scan; }
#line 1295 "src/parse/lex.cc"
yy228:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy255;
	} else {
		if (yych <= ' ') goto yy255;
		if (yych == '#') goto yy258;
	}
yy229:
#line 391 "../src/parse/lex.re"
	{
        next_line();
        if (lexer_state == LEX_FLEX_NAME) {
            lexer_state = LEX_NORMAL;
            return TOKEN_FID_END;
        }
        else {
            goto scan;
        }
    }
#line 1317 "src/parse/lex.cc"
yy230:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy228;
	goto yy224;
yy231:
	++YYCURSOR;
#line 303 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('"'); return TOKEN_REGEXP; }
#line 1326 "src/parse/lex.cc"
yy233:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy224;
		if (yych <= 'Z') goto yy260;
		goto yy224;
	} else {
		if (yych == '`') goto yy224;
		if (yych <= 'z') goto yy260;
		goto yy224;
	}
yy234:
	++YYCURSOR;
yy235:
#line 313 "../src/parse/lex.re"
	{ return *tok; }
#line 1343 "src/parse/lex.cc"
yy236:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '}') goto yy263;
	goto yy224;
yy237:
	++YYCURSOR;
#line 302 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('\''); return TOKEN_REGEXP; }
#line 1352 "src/parse/lex.cc"
yy239:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy263;
	goto yy235;
yy240:
	++YYCURSOR;
#line 379 "../src/parse/lex.re"
	{
        yylval.regexp = ast_dot(get_line(), get_column());
        return TOKEN_REGEXP;
    }
#line 1364 "src/parse/lex.cc"
yy242:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy265;
	if (yych == '/') goto yy267;
	goto yy235;
yy243:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy269;
	goto yy224;
yy244:
	++YYCURSOR;
#line 295 "../src/parse/lex.re"
	{ return lex_clist(); }
#line 1378 "src/parse/lex.cc"
yy246:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '>') goto yy271;
	goto yy235;
yy247:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy248:
	if (yybm[0+yych] & 32) {
		goto yy247;
	}
#line 357 "../src/parse/lex.re"
	{
        if (!globopts->FFlag || lex_namedef_context_re2c()) {
            yylval.str = newstr(tok, cur);
            return TOKEN_ID;
        }
        else if (lex_namedef_context_flex()) {
            yylval.str = newstr(tok, cur);
            lexer_state = LEX_FLEX_NAME;
            return TOKEN_FID;
        }
        else {
            // consume one character, otherwise we risk breaking operator
            // precedence in cases like ab*: it should be a(b)*, not (ab)*
            cur = tok + 1;

            std::vector<ASTChar> *str = new std::vector<ASTChar>;
            str->push_back(ASTChar(static_cast<uint8_t>(tok[0]), 0));
            yylval.regexp = ast_str(get_line(), get_column(), str, false);
            return TOKEN_REGEXP;
        }
    }
#line 1414 "src/parse/lex.cc"
yy250:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '^') goto yy273;
#line 304 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(false); return TOKEN_REGEXP; }
#line 1420 "src/parse/lex.cc"
yy252:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy275;
	goto yy248;
yy253:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 64) {
		goto yy278;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy276;
		if (yych >= 'A') goto yy280;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy280;
		} else {
			if (yych <= '`') goto yy254;
			if (yych <= 'z') goto yy280;
		}
	}
yy254:
#line 287 "../src/parse/lex.re"
	{ lex_code_in_braces(); return TOKEN_CODE; }
#line 1445 "src/parse/lex.cc"
yy255:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy255;
	} else {
		if (yych <= ' ') goto yy255;
		if (yych == '#') goto yy258;
	}
yy257:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 2) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) {
				goto yy229;
			} else {
				goto yy235;
			}
		} else {
			goto yy254;
		}
	} else {
		if (yyaccept == 3) {
			goto yy270;
		} else {
			goto yy277;
		}
	}
yy258:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy258;
		goto yy257;
	} else {
		if (yych <= ' ') goto yy258;
		if (yych == 'l') goto yy282;
		goto yy257;
	}
yy260:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy262;
		if (yych <= '9') goto yy260;
		if (yych >= 'A') goto yy260;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy260;
		} else {
			if (yych <= '`') goto yy262;
			if (yych <= 'z') goto yy260;
		}
	}
yy262:
#line 307 "../src/parse/lex.re"
	{
        yylval.regexp = ast_tag(get_line(), get_column()
            , newstr(tok + 1, cur), tok[0] == '#');
        return TOKEN_REGEXP;
    }
#line 1510 "src/parse/lex.cc"
yy263:
	++YYCURSOR;
#line 300 "../src/parse/lex.re"
	{ tok = cur; return 0; }
#line 1515 "src/parse/lex.cc"
yy265:
	++YYCURSOR;
#line 298 "../src/parse/lex.re"
	{ lex_c_comment(); goto scan; }
#line 1520 "src/parse/lex.cc"
yy267:
	++YYCURSOR;
#line 297 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto scan; }
#line 1525 "src/parse/lex.cc"
yy269:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '>') goto yy271;
yy270:
#line 288 "../src/parse/lex.re"
	{ lex_code_indented(); return TOKEN_CODE; }
#line 1533 "src/parse/lex.cc"
yy271:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '@') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy257;
			goto yy271;
		} else {
			if (yych == ' ') goto yy271;
			goto yy257;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') {
				yyt1 = YYCURSOR;
				goto yy283;
			}
			if (yych <= '^') goto yy257;
			yyt1 = YYCURSOR;
			goto yy283;
		} else {
			if (yych <= '`') goto yy257;
			if (yych <= 'z') {
				yyt1 = YYCURSOR;
				goto yy283;
			}
			goto yy257;
		}
	}
yy273:
	++YYCURSOR;
#line 305 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(true);  return TOKEN_REGEXP; }
#line 1568 "src/parse/lex.cc"
yy275:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy286;
	goto yy248;
yy276:
	++YYCURSOR;
yy277:
#line 341 "../src/parse/lex.re"
	{
        fatal_lc(get_line(), get_column(),
            "illegal closure form, use '{n}', '{n,}', '{n,m}' where n and m are numbers");
    }
#line 1581 "src/parse/lex.cc"
yy278:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy278;
	}
	if (yych == ',') {
		yyt1 = YYCURSOR;
		goto yy287;
	}
	if (yych == '}') goto yy288;
	goto yy257;
yy280:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy257;
			goto yy280;
		} else {
			if (yych <= '@') goto yy257;
			if (yych <= 'Z') goto yy280;
			goto yy257;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy257;
			goto yy280;
		} else {
			if (yych == '}') goto yy290;
			goto yy257;
		}
	}
yy282:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy292;
	goto yy257;
yy283:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy285;
		if (yych <= '9') goto yy283;
		if (yych >= 'A') goto yy283;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy283;
		} else {
			if (yych <= '`') goto yy285;
			if (yych <= 'z') goto yy283;
		}
	}
yy285:
	p = yyt1;
#line 290 "../src/parse/lex.re"
	{
        yylval.str = newstr(p, cur);
        return tok[0] == ':' ? TOKEN_CJUMP : TOKEN_CNEXT;
    }
#line 1644 "src/parse/lex.cc"
yy286:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy293;
	goto yy248;
yy287:
	yyaccept = 4;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy277;
	if (yych <= '9') goto yy294;
	if (yych == '}') goto yy296;
	goto yy277;
yy288:
	++YYCURSOR;
#line 315 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval.bounds.min)) {
            fatal_lc(get_line(), get_column(), "repetition count overflow");
        }
        yylval.bounds.max = yylval.bounds.min;
        return TOKEN_CLOSESIZE;
    }
#line 1666 "src/parse/lex.cc"
yy290:
	++YYCURSOR;
#line 346 "../src/parse/lex.re"
	{
        if (!globopts->FFlag) {
            fatal_lc(get_line(), get_column(),
                "curly braces for names only allowed with -F switch");
        }
        yylval.str = newstr(tok + 1, cur - 1);
        return TOKEN_ID;
    }
#line 1678 "src/parse/lex.cc"
yy292:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy298;
	goto yy257;
yy293:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy299;
	goto yy248;
yy294:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '/') goto yy257;
	if (yych <= '9') goto yy294;
	if (yych == '}') goto yy301;
	goto yy257;
yy296:
	++YYCURSOR;
#line 333 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval.bounds.min)) {
            fatal_lc(get_line(), get_column(), "repetition lower bound overflow");
        }
        yylval.bounds.max = std::numeric_limits<uint32_t>::max();
        return TOKEN_CLOSESIZE;
    }
#line 1705 "src/parse/lex.cc"
yy298:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy303;
	goto yy257;
yy299:
	++YYCURSOR;
#line 355 "../src/parse/lex.re"
	{ return TOKEN_CONF; }
#line 1714 "src/parse/lex.cc"
yy301:
	++YYCURSOR;
	p = yyt1;
#line 323 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, p, yylval.bounds.min)) {
            fatal_lc(get_line(), get_column(), "repetition lower bound overflow");
        }
        if (!s_to_u32_unsafe (p + 1, cur - 1, yylval.bounds.max)) {
            fatal_lc(get_line(), get_column(), "repetition upper bound overflow");
        }
        return TOKEN_CLOSESIZE;
    }
#line 1728 "src/parse/lex.cc"
yy303:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy305;
	if (yych <= '9') goto yy257;
	goto yy305;
yy304:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy305:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy304;
		goto yy257;
	} else {
		if (yych <= ' ') goto yy304;
		if (yych <= '0') goto yy257;
		if (yych >= ':') goto yy257;
		yyt1 = YYCURSOR;
	}
yy306:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy257;
		} else {
			if (yych <= '\n') goto yy310;
			if (yych <= '\f') goto yy257;
			goto yy312;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy257;
		} else {
			if (yych <= '/') goto yy257;
			if (yych <= '9') goto yy306;
			goto yy257;
		}
	}
yy308:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy308;
		goto yy257;
	} else {
		if (yych <= ' ') goto yy308;
		if (yych == '"') goto yy313;
		goto yy257;
	}
yy310:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 386 "../src/parse/lex.re"
	{
        set_sourceline ();
        return TOKEN_LINE_INFO;
    }
#line 1789 "src/parse/lex.cc"
yy312:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy310;
	goto yy257;
yy313:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy313;
	}
	if (yych <= '\n') goto yy257;
	if (yych >= '#') goto yy316;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy310;
	if (yych == '\r') goto yy312;
	goto yy257;
yy316:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy257;
	if (yych == '\n') goto yy257;
	goto yy313;
}
#line 406 "../src/parse/lex.re"

}

bool Scanner::lex_namedef_context_re2c()
{

#line 1822 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt1 = YYCURSOR;
			goto yy320;
		}
	} else {
		if (yych <= ' ') {
			yyt1 = YYCURSOR;
			goto yy320;
		}
		if (yych == '=') {
			yyt1 = YYCURSOR;
			goto yy323;
		}
	}
yy319:
#line 413 "../src/parse/lex.re"
	{ return false; }
#line 1879 "src/parse/lex.cc"
yy320:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy320;
	}
	if (yych == '=') goto yy323;
yy322:
	YYCURSOR = YYMARKER;
	goto yy319;
yy323:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '>') goto yy322;
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 412 "../src/parse/lex.re"
	{ return true; }
#line 1898 "src/parse/lex.cc"
}
#line 414 "../src/parse/lex.re"

}

bool Scanner::lex_namedef_context_flex()
{

#line 1907 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\t') {
		yyt1 = YYCURSOR;
		goto yy329;
	}
	if (yych == ' ') {
		yyt1 = YYCURSOR;
		goto yy329;
	}
#line 422 "../src/parse/lex.re"
	{ return false; }
#line 1956 "src/parse/lex.cc"
yy329:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy329;
	}
	if (yych <= '<') {
		if (yych == ':') goto yy332;
	} else {
		if (yych <= '=') goto yy332;
		if (yych == '{') goto yy332;
	}
	YYCURSOR = yyt1;
#line 421 "../src/parse/lex.re"
	{ return true; }
#line 1973 "src/parse/lex.cc"
yy332:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 420 "../src/parse/lex.re"
	{ return false; }
#line 1979 "src/parse/lex.cc"
}
#line 423 "../src/parse/lex.re"

}

int Scanner::lex_clist()
{
    int kind = TOKEN_CLIST;
    CondList *cl = new CondList;

#line 1990 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	goto yy334;
yy335:
	++YYCURSOR;
yy334:
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy335;
	}
	if (yych <= 0x1F) goto yy337;
	if (yych <= '!') goto yy338;
	if (yych == '>') goto yy341;
yy337:
#line 433 "../src/parse/lex.re"
	{ goto cond; }
#line 2042 "src/parse/lex.cc"
yy338:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\t') goto yy338;
	if (yych == ' ') goto yy338;
#line 431 "../src/parse/lex.re"
	{ kind = TOKEN_CSETUP; goto cond; }
#line 2051 "src/parse/lex.cc"
yy341:
	++YYCURSOR;
#line 432 "../src/parse/lex.re"
	{ kind = TOKEN_CZERO; goto end; }
#line 2056 "src/parse/lex.cc"
}
#line 434 "../src/parse/lex.re"

cond:
    tok = cur;

#line 2063 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych == '*') goto yy347;
		if (yych >= 'A') goto yy349;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy349;
		} else {
			if (yych <= '`') goto yy345;
			if (yych <= 'z') goto yy349;
		}
	}
yy345:
	++YYCURSOR;
#line 440 "../src/parse/lex.re"
	{ goto error; }
#line 2117 "src/parse/lex.cc"
yy347:
	++YYCURSOR;
#line 439 "../src/parse/lex.re"
	{ if (!cl->empty()) goto error; cl->insert("*"); goto next; }
#line 2122 "src/parse/lex.cc"
yy349:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy349;
	}
#line 438 "../src/parse/lex.re"
	{ cl->insert(getstr(tok, cur)); goto next; }
#line 2132 "src/parse/lex.cc"
}
#line 441 "../src/parse/lex.re"

next:

#line 2138 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ' ') {
		if (yych == '\t') goto yy356;
		if (yych >= ' ') goto yy356;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy357;
		} else {
			if (yych == '>') goto yy360;
		}
	}
	++YYCURSOR;
yy355:
#line 446 "../src/parse/lex.re"
	{ goto error; }
#line 2191 "src/parse/lex.cc"
yy356:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= ' ') {
		if (yych == '\t') goto yy362;
		if (yych <= 0x1F) goto yy355;
		goto yy362;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy355;
		} else {
			if (yych == '>') goto yy360;
			goto yy355;
		}
	}
yy357:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy357;
	}
#line 444 "../src/parse/lex.re"
	{ goto cond; }
#line 2215 "src/parse/lex.cc"
yy360:
	++YYCURSOR;
#line 445 "../src/parse/lex.re"
	{ goto end; }
#line 2220 "src/parse/lex.cc"
yy362:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ' ') {
		if (yych == '\t') goto yy362;
		if (yych >= ' ') goto yy362;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy357;
		} else {
			if (yych == '>') goto yy360;
		}
	}
	YYCURSOR = YYMARKER;
	goto yy355;
}
#line 447 "../src/parse/lex.re"

end:
    yylval.clist = cl;
    return kind;
error:
    delete cl;
    fatal_l(get_line(), "syntax error in condition list");
}

void Scanner::lex_code_indented()
{
    const uint32_t line = get_line();
    tok = cur;
code:

#line 2254 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy367;
			if (yych == '\n') goto yy371;
			goto yy369;
		} else {
			if (yych <= '\r') goto yy373;
			if (yych == '"') goto yy374;
			goto yy369;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy374;
			if (yych == '/') goto yy376;
			goto yy369;
		} else {
			if (yych == '|') goto yy369;
			if (yych <= '}') goto yy377;
			goto yy369;
		}
	}
yy367:
	++YYCURSOR;
#line 470 "../src/parse/lex.re"
	{ fail_if_eof(); goto code; }
#line 2284 "src/parse/lex.cc"
yy369:
	++YYCURSOR;
yy370:
#line 475 "../src/parse/lex.re"
	{ goto code; }
#line 2290 "src/parse/lex.cc"
yy371:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy372;
		if (yych <= '\n') goto yy379;
	} else {
		if (yych <= '\r') goto yy379;
		if (yych == ' ') goto yy379;
	}
yy372:
#line 463 "../src/parse/lex.re"
	{
        while (isspace(tok[0])) ++tok;
        while (cur > tok && isspace(cur[-1])) --cur;
        yylval.code = new Code(get_fname (), line, getstr(tok, cur));
        return;
    }
#line 2308 "src/parse/lex.cc"
yy373:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy371;
	goto yy370;
yy374:
	++YYCURSOR;
#line 474 "../src/parse/lex.re"
	{ lex_string(cur[-1]); goto code; }
#line 2317 "src/parse/lex.cc"
yy376:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy381;
	if (yych == '/') goto yy383;
	goto yy370;
yy377:
	++YYCURSOR;
#line 471 "../src/parse/lex.re"
	{ fatal_l(get_line(), "Curly braces are not allowed after ':='"); }
#line 2327 "src/parse/lex.cc"
yy379:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 462 "../src/parse/lex.re"
	{ goto code; }
#line 2333 "src/parse/lex.cc"
yy381:
	++YYCURSOR;
#line 472 "../src/parse/lex.re"
	{ lex_c_comment(); goto code; }
#line 2338 "src/parse/lex.cc"
yy383:
	++YYCURSOR;
#line 473 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto code; }
#line 2343 "src/parse/lex.cc"
}
#line 476 "../src/parse/lex.re"

}

void Scanner::lex_code_in_braces()
{
    const uint32_t line = get_line();
    uint32_t depth = 1;
code:

#line 2355 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy387;
			if (yych == '\n') goto yy391;
			goto yy389;
		} else {
			if (yych <= '\r') goto yy393;
			if (yych == '"') goto yy394;
			goto yy389;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy394;
			if (yych == '/') goto yy396;
			goto yy389;
		} else {
			if (yych <= '{') goto yy397;
			if (yych == '}') goto yy399;
			goto yy389;
		}
	}
yy387:
	++YYCURSOR;
#line 496 "../src/parse/lex.re"
	{ fail_if_eof(); goto code; }
#line 2419 "src/parse/lex.cc"
yy389:
	++YYCURSOR;
yy390:
#line 500 "../src/parse/lex.re"
	{ goto code; }
#line 2425 "src/parse/lex.cc"
yy391:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy401;
	}
	if (yych == '#') goto yy404;
yy392:
#line 495 "../src/parse/lex.re"
	{ next_line(); goto code; }
#line 2435 "src/parse/lex.cc"
yy393:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy391;
	goto yy390;
yy394:
	++YYCURSOR;
#line 499 "../src/parse/lex.re"
	{ lex_string(cur[-1]); goto code; }
#line 2444 "src/parse/lex.cc"
yy396:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy406;
	if (yych == '/') goto yy408;
	goto yy390;
yy397:
	++YYCURSOR;
#line 493 "../src/parse/lex.re"
	{ ++depth; goto code; }
#line 2454 "src/parse/lex.cc"
yy399:
	++YYCURSOR;
#line 485 "../src/parse/lex.re"
	{
        if (--depth == 0) {
            yylval.code = new Code(get_fname (), line, getstr(tok, cur));
            return;
        }
        goto code;
    }
#line 2465 "src/parse/lex.cc"
yy401:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy401;
	}
	if (yych == '#') goto yy404;
yy403:
	YYCURSOR = YYMARKER;
	goto yy392;
yy404:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy404;
		goto yy403;
	} else {
		if (yych <= ' ') goto yy404;
		if (yych == 'l') goto yy410;
		goto yy403;
	}
yy406:
	++YYCURSOR;
#line 497 "../src/parse/lex.re"
	{ lex_c_comment(); goto code; }
#line 2493 "src/parse/lex.cc"
yy408:
	++YYCURSOR;
#line 498 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto code; }
#line 2498 "src/parse/lex.cc"
yy410:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy403;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy403;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy403;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy415;
	if (yych <= '9') goto yy403;
	goto yy415;
yy414:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy415:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy414;
		goto yy403;
	} else {
		if (yych <= ' ') goto yy414;
		if (yych <= '0') goto yy403;
		if (yych >= ':') goto yy403;
		yyt1 = YYCURSOR;
	}
yy416:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy416;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy403;
		if (yych <= '\t') goto yy418;
		if (yych <= '\n') goto yy420;
		goto yy403;
	} else {
		if (yych <= '\r') goto yy422;
		if (yych != ' ') goto yy403;
	}
yy418:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy418;
		goto yy403;
	} else {
		if (yych <= ' ') goto yy418;
		if (yych == '"') goto yy423;
		goto yy403;
	}
yy420:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 494 "../src/parse/lex.re"
	{ set_sourceline (); goto code; }
#line 2557 "src/parse/lex.cc"
yy422:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy420;
	goto yy403;
yy423:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy423;
	}
	if (yych <= '\n') goto yy403;
	if (yych >= '#') goto yy426;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy420;
	if (yych == '\r') goto yy422;
	goto yy403;
yy426:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy403;
	if (yych == '\n') goto yy403;
	goto yy423;
}
#line 501 "../src/parse/lex.re"

}

void Scanner::lex_string(char delim)
{
loop:

#line 2591 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy429;
			if (yych <= '\t') goto yy431;
			goto yy433;
		} else {
			if (yych == '\r') goto yy435;
			goto yy431;
		}
	} else {
		if (yych <= '\'') {
			if (yych <= '"') goto yy436;
			if (yych <= '&') goto yy431;
			goto yy436;
		} else {
			if (yych == '\\') goto yy438;
			goto yy431;
		}
	}
yy429:
	++YYCURSOR;
#line 511 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 2619 "src/parse/lex.cc"
yy431:
	++YYCURSOR;
yy432:
#line 512 "../src/parse/lex.re"
	{ goto loop; }
#line 2625 "src/parse/lex.cc"
yy433:
	++YYCURSOR;
#line 510 "../src/parse/lex.re"
	{ next_line(); goto loop; }
#line 2630 "src/parse/lex.cc"
yy435:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy433;
	goto yy432;
yy436:
	++YYCURSOR;
#line 508 "../src/parse/lex.re"
	{ if (cur[-1] == delim) return; else goto loop; }
#line 2639 "src/parse/lex.cc"
yy438:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '&') {
		if (yych != '"') goto yy432;
	} else {
		if (yych <= '\'') goto yy439;
		if (yych != '\\') goto yy432;
	}
yy439:
	++YYCURSOR;
#line 509 "../src/parse/lex.re"
	{ goto loop; }
#line 2652 "src/parse/lex.cc"
}
#line 513 "../src/parse/lex.re"

}

void Scanner::lex_c_comment()
{
loop:

#line 2662 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy443;
		if (yych == '\n') goto yy447;
		goto yy445;
	} else {
		if (yych <= '\r') goto yy449;
		if (yych == '*') goto yy450;
		goto yy445;
	}
yy443:
	++YYCURSOR;
#line 522 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 2680 "src/parse/lex.cc"
yy445:
	++YYCURSOR;
yy446:
#line 523 "../src/parse/lex.re"
	{ goto loop; }
#line 2686 "src/parse/lex.cc"
yy447:
	++YYCURSOR;
#line 521 "../src/parse/lex.re"
	{ next_line(); goto loop; }
#line 2691 "src/parse/lex.cc"
yy449:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy447;
	goto yy446;
yy450:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy446;
	++YYCURSOR;
#line 520 "../src/parse/lex.re"
	{ return; }
#line 2702 "src/parse/lex.cc"
}
#line 524 "../src/parse/lex.re"

}

void Scanner::lex_cpp_comment()
{
loop:

#line 2712 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\n') {
		if (yych <= 0x00) goto yy455;
		if (yych <= '\t') goto yy457;
		goto yy459;
	} else {
		if (yych == '\r') goto yy461;
		goto yy457;
	}
yy455:
	++YYCURSOR;
#line 532 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 2729 "src/parse/lex.cc"
yy457:
	++YYCURSOR;
yy458:
#line 533 "../src/parse/lex.re"
	{ goto loop; }
#line 2735 "src/parse/lex.cc"
yy459:
	++YYCURSOR;
#line 531 "../src/parse/lex.re"
	{ next_line(); return; }
#line 2740 "src/parse/lex.cc"
yy461:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy459;
	goto yy458;
}
#line 534 "../src/parse/lex.re"

}

const AST *Scanner::lex_cls(bool neg)
{
    std::vector<ASTRange> *cls = new std::vector<ASTRange>;
    uint32_t u, l, c, c0 = get_column();
fst:
    tok = cur;
    c = get_column();

#line 2758 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == ']') goto yy465;
#line 546 "../src/parse/lex.re"
	{ l = lex_cls_chr(); goto snd; }
#line 2766 "src/parse/lex.cc"
yy465:
	++YYCURSOR;
#line 545 "../src/parse/lex.re"
	{ return ast_cls(get_line(), c0, cls, neg); }
#line 2771 "src/parse/lex.cc"
}
#line 547 "../src/parse/lex.re"

snd:

#line 2777 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych == '-') goto yy470;
yy469:
#line 550 "../src/parse/lex.re"
	{ u = l; goto add; }
#line 2786 "src/parse/lex.cc"
yy470:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ']') goto yy472;
	YYCURSOR = YYMARKER;
	goto yy469;
yy472:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 551 "../src/parse/lex.re"
	{
        u = lex_cls_chr();
        if (l > u) {
            warn.swapped_range(get_line(), l, u);
            std::swap(l, u);
        }
        goto add;
    }
#line 2804 "src/parse/lex.cc"
}
#line 559 "../src/parse/lex.re"

add:
    cls->push_back(ASTRange(l, u, c));
    goto fst;
}

uint32_t Scanner::lex_cls_chr()
{
    tok = cur;
    const uint32_t l = get_line(), c = get_column();

#line 2818 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy476;
		if (yych == '\n') goto yy480;
		goto yy478;
	} else {
		if (yych <= '\r') goto yy482;
		if (yych == '\\') goto yy483;
		goto yy478;
	}
yy476:
	++YYCURSOR;
#line 571 "../src/parse/lex.re"
	{ fail_if_eof(); return 0; }
#line 2837 "src/parse/lex.cc"
yy478:
	++YYCURSOR;
yy479:
#line 577 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(tok[0]); }
#line 2843 "src/parse/lex.cc"
yy480:
	++YYCURSOR;
#line 572 "../src/parse/lex.re"
	{ fatal_lc(l, c, "newline in character class"); }
#line 2848 "src/parse/lex.cc"
yy482:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy480;
	goto yy479;
yy483:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\\') {
		if (yych <= '/') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy484;
				if (yych == '\n') goto yy480;
				goto yy485;
			} else {
				if (yych <= '\r') goto yy487;
				if (yych == '-') goto yy488;
				goto yy485;
			}
		} else {
			if (yych <= 'U') {
				if (yych <= '3') goto yy490;
				if (yych <= '7') goto yy492;
				if (yych <= 'T') goto yy485;
				goto yy493;
			} else {
				if (yych == 'X') goto yy495;
				if (yych <= '[') goto yy485;
				goto yy496;
			}
		}
	} else {
		if (yych <= 'n') {
			if (yych <= 'b') {
				if (yych <= ']') goto yy498;
				if (yych <= '`') goto yy485;
				if (yych <= 'a') goto yy500;
				goto yy502;
			} else {
				if (yych == 'f') goto yy504;
				if (yych <= 'm') goto yy485;
				goto yy506;
			}
		} else {
			if (yych <= 't') {
				if (yych == 'r') goto yy508;
				if (yych <= 's') goto yy485;
				goto yy510;
			} else {
				if (yych <= 'v') {
					if (yych <= 'u') goto yy495;
					goto yy512;
				} else {
					if (yych == 'x') goto yy514;
					goto yy485;
				}
			}
		}
	}
yy484:
#line 575 "../src/parse/lex.re"
	{ fatal_lc(l, c, "syntax error in escape sequence"); }
#line 2909 "src/parse/lex.cc"
yy485:
	++YYCURSOR;
yy486:
#line 590 "../src/parse/lex.re"
	{
        warn.useless_escape(l, c, tok[1]);
        return static_cast<uint8_t>(tok[1]);
    }
#line 2918 "src/parse/lex.cc"
yy487:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy480;
	goto yy486;
yy488:
	++YYCURSOR;
#line 588 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 2927 "src/parse/lex.cc"
yy490:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy491;
	if (yych <= '7') goto yy515;
yy491:
#line 574 "../src/parse/lex.re"
	{ fatal_lc(l, c, "syntax error in octal escape sequence"); }
#line 2936 "src/parse/lex.cc"
yy492:
	++YYCURSOR;
	goto yy491;
yy493:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy494;
		if (yych <= '9') goto yy517;
	} else {
		if (yych <= 'F') goto yy517;
		if (yych <= '`') goto yy494;
		if (yych <= 'f') goto yy517;
	}
yy494:
#line 573 "../src/parse/lex.re"
	{ fatal_lc(l, c, "syntax error in hexadecimal escape sequence"); }
#line 2954 "src/parse/lex.cc"
yy495:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy494;
		if (yych <= '9') goto yy518;
		goto yy494;
	} else {
		if (yych <= 'F') goto yy518;
		if (yych <= '`') goto yy494;
		if (yych <= 'f') goto yy518;
		goto yy494;
	}
yy496:
	++YYCURSOR;
#line 587 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 2972 "src/parse/lex.cc"
yy498:
	++YYCURSOR;
#line 589 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 2977 "src/parse/lex.cc"
yy500:
	++YYCURSOR;
#line 580 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 2982 "src/parse/lex.cc"
yy502:
	++YYCURSOR;
#line 581 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 2987 "src/parse/lex.cc"
yy504:
	++YYCURSOR;
#line 582 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 2992 "src/parse/lex.cc"
yy506:
	++YYCURSOR;
#line 583 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 2997 "src/parse/lex.cc"
yy508:
	++YYCURSOR;
#line 584 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 3002 "src/parse/lex.cc"
yy510:
	++YYCURSOR;
#line 585 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 3007 "src/parse/lex.cc"
yy512:
	++YYCURSOR;
#line 586 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 3012 "src/parse/lex.cc"
yy514:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy494;
		if (yych <= '9') goto yy519;
		goto yy494;
	} else {
		if (yych <= 'F') goto yy519;
		if (yych <= '`') goto yy494;
		if (yych <= 'f') goto yy519;
		goto yy494;
	}
yy515:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy516;
	if (yych <= '7') goto yy520;
yy516:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy491;
	} else {
		goto yy494;
	}
yy517:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy516;
		if (yych <= '9') goto yy522;
		goto yy516;
	} else {
		if (yych <= 'F') goto yy522;
		if (yych <= '`') goto yy516;
		if (yych <= 'f') goto yy522;
		goto yy516;
	}
yy518:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy516;
		if (yych <= '9') goto yy523;
		goto yy516;
	} else {
		if (yych <= 'F') goto yy523;
		if (yych <= '`') goto yy516;
		if (yych <= 'f') goto yy523;
		goto yy516;
	}
yy519:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy516;
		if (yych <= '9') goto yy524;
		goto yy516;
	} else {
		if (yych <= 'F') goto yy524;
		if (yych <= '`') goto yy516;
		if (yych <= 'f') goto yy524;
		goto yy516;
	}
yy520:
	++YYCURSOR;
#line 579 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 3077 "src/parse/lex.cc"
yy522:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy516;
		if (yych <= '9') goto yy526;
		goto yy516;
	} else {
		if (yych <= 'F') goto yy526;
		if (yych <= '`') goto yy516;
		if (yych <= 'f') goto yy526;
		goto yy516;
	}
yy523:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy516;
		if (yych <= '9') goto yy519;
		goto yy516;
	} else {
		if (yych <= 'F') goto yy519;
		if (yych <= '`') goto yy516;
		if (yych <= 'f') goto yy519;
		goto yy516;
	}
yy524:
	++YYCURSOR;
#line 578 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 3106 "src/parse/lex.cc"
yy526:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy516;
		if (yych >= ':') goto yy516;
	} else {
		if (yych <= 'F') goto yy527;
		if (yych <= '`') goto yy516;
		if (yych >= 'g') goto yy516;
	}
yy527:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy516;
		if (yych <= '9') goto yy518;
		goto yy516;
	} else {
		if (yych <= 'F') goto yy518;
		if (yych <= '`') goto yy516;
		if (yych <= 'f') goto yy518;
		goto yy516;
	}
}
#line 594 "../src/parse/lex.re"

}

uint32_t Scanner::lex_str_chr(char quote, bool &end)
{
    end = false;
    tok = cur;
    const uint32_t l = get_line(), c = get_column();

#line 3140 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy530;
		if (yych == '\n') goto yy534;
		goto yy532;
	} else {
		if (yych <= '\r') goto yy536;
		if (yych == '\\') goto yy537;
		goto yy532;
	}
yy530:
	++YYCURSOR;
#line 604 "../src/parse/lex.re"
	{ fail_if_eof(); return 0; }
#line 3159 "src/parse/lex.cc"
yy532:
	++YYCURSOR;
yy533:
#line 610 "../src/parse/lex.re"
	{
        end = tok[0] == quote;
        return static_cast<uint8_t>(tok[0]);
    }
#line 3168 "src/parse/lex.cc"
yy534:
	++YYCURSOR;
#line 605 "../src/parse/lex.re"
	{ fatal_lc(l, c, "newline in character string"); }
#line 3173 "src/parse/lex.cc"
yy536:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy534;
	goto yy533;
yy537:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '`') {
		if (yych <= '3') {
			if (yych <= '\n') {
				if (yych <= 0x00) goto yy538;
				if (yych <= '\t') goto yy539;
				goto yy534;
			} else {
				if (yych == '\r') goto yy541;
				if (yych <= '/') goto yy539;
				goto yy542;
			}
		} else {
			if (yych <= 'W') {
				if (yych <= '7') goto yy544;
				if (yych == 'U') goto yy545;
				goto yy539;
			} else {
				if (yych <= 'X') goto yy547;
				if (yych == '\\') goto yy548;
				goto yy539;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy550;
				if (yych <= 'b') goto yy552;
				goto yy539;
			} else {
				if (yych <= 'f') goto yy554;
				if (yych == 'n') goto yy556;
				goto yy539;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy558;
				if (yych <= 's') goto yy539;
				if (yych <= 't') goto yy560;
				goto yy547;
			} else {
				if (yych <= 'v') goto yy562;
				if (yych == 'x') goto yy564;
				goto yy539;
			}
		}
	}
yy538:
#line 608 "../src/parse/lex.re"
	{ fatal_lc(l, c, "syntax error in escape sequence"); }
#line 3229 "src/parse/lex.cc"
yy539:
	++YYCURSOR;
yy540:
#line 624 "../src/parse/lex.re"
	{
        if (tok[1] != quote) {
            warn.useless_escape(l, c, tok[1]);
        }
        return static_cast<uint8_t>(tok[1]);
    }
#line 3240 "src/parse/lex.cc"
yy541:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy534;
	goto yy540;
yy542:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy543;
	if (yych <= '7') goto yy565;
yy543:
#line 607 "../src/parse/lex.re"
	{ fatal_lc(l, c, "syntax error in octal escape sequence"); }
#line 3253 "src/parse/lex.cc"
yy544:
	++YYCURSOR;
	goto yy543;
yy545:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy546;
		if (yych <= '9') goto yy567;
	} else {
		if (yych <= 'F') goto yy567;
		if (yych <= '`') goto yy546;
		if (yych <= 'f') goto yy567;
	}
yy546:
#line 606 "../src/parse/lex.re"
	{ fatal_lc(l, c, "syntax error in hexadecimal escape sequence"); }
#line 3271 "src/parse/lex.cc"
yy547:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy546;
		if (yych <= '9') goto yy568;
		goto yy546;
	} else {
		if (yych <= 'F') goto yy568;
		if (yych <= '`') goto yy546;
		if (yych <= 'f') goto yy568;
		goto yy546;
	}
yy548:
	++YYCURSOR;
#line 623 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 3289 "src/parse/lex.cc"
yy550:
	++YYCURSOR;
#line 616 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 3294 "src/parse/lex.cc"
yy552:
	++YYCURSOR;
#line 617 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 3299 "src/parse/lex.cc"
yy554:
	++YYCURSOR;
#line 618 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 3304 "src/parse/lex.cc"
yy556:
	++YYCURSOR;
#line 619 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 3309 "src/parse/lex.cc"
yy558:
	++YYCURSOR;
#line 620 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 3314 "src/parse/lex.cc"
yy560:
	++YYCURSOR;
#line 621 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 3319 "src/parse/lex.cc"
yy562:
	++YYCURSOR;
#line 622 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 3324 "src/parse/lex.cc"
yy564:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy546;
		if (yych <= '9') goto yy569;
		goto yy546;
	} else {
		if (yych <= 'F') goto yy569;
		if (yych <= '`') goto yy546;
		if (yych <= 'f') goto yy569;
		goto yy546;
	}
yy565:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy566;
	if (yych <= '7') goto yy570;
yy566:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy543;
	} else {
		goto yy546;
	}
yy567:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy566;
		if (yych <= '9') goto yy572;
		goto yy566;
	} else {
		if (yych <= 'F') goto yy572;
		if (yych <= '`') goto yy566;
		if (yych <= 'f') goto yy572;
		goto yy566;
	}
yy568:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy566;
		if (yych <= '9') goto yy573;
		goto yy566;
	} else {
		if (yych <= 'F') goto yy573;
		if (yych <= '`') goto yy566;
		if (yych <= 'f') goto yy573;
		goto yy566;
	}
yy569:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy566;
		if (yych <= '9') goto yy574;
		goto yy566;
	} else {
		if (yych <= 'F') goto yy574;
		if (yych <= '`') goto yy566;
		if (yych <= 'f') goto yy574;
		goto yy566;
	}
yy570:
	++YYCURSOR;
#line 615 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 3389 "src/parse/lex.cc"
yy572:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy566;
		if (yych <= '9') goto yy576;
		goto yy566;
	} else {
		if (yych <= 'F') goto yy576;
		if (yych <= '`') goto yy566;
		if (yych <= 'f') goto yy576;
		goto yy566;
	}
yy573:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy566;
		if (yych <= '9') goto yy569;
		goto yy566;
	} else {
		if (yych <= 'F') goto yy569;
		if (yych <= '`') goto yy566;
		if (yych <= 'f') goto yy569;
		goto yy566;
	}
yy574:
	++YYCURSOR;
#line 614 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 3418 "src/parse/lex.cc"
yy576:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy566;
		if (yych >= ':') goto yy566;
	} else {
		if (yych <= 'F') goto yy577;
		if (yych <= '`') goto yy566;
		if (yych >= 'g') goto yy566;
	}
yy577:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy566;
		if (yych <= '9') goto yy568;
		goto yy566;
	} else {
		if (yych <= 'F') goto yy568;
		if (yych <= '`') goto yy566;
		if (yych <= 'f') goto yy568;
		goto yy566;
	}
}
#line 630 "../src/parse/lex.re"

}

const AST *Scanner::lex_str(char quote)
{
    const uint32_t line = get_line(), column = get_column();
    std::vector<ASTChar> *str = new std::vector<ASTChar>;
    for (bool end;;) {
        const uint32_t c = lex_str_chr(quote, end);
        if (end) return ast_str(line, column, str, quote == '\'');
        str->push_back(ASTChar(c, get_column()));
    }
}

void Scanner::set_sourceline ()
{
sourceline:
    tok = cur;

#line 3462 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy582;
		} else {
			if (yych <= '\n') goto yy584;
			if (yych <= '\f') goto yy582;
			goto yy586;
		}
	} else {
		if (yych <= '"') {
			if (yych <= '!') goto yy582;
			goto yy587;
		} else {
			if (yych <= '0') goto yy582;
			if (yych <= '9') goto yy588;
			goto yy582;
		}
	}
	++YYCURSOR;
#line 666 "../src/parse/lex.re"
	{ --cur; return; }
#line 3522 "src/parse/lex.cc"
yy582:
	++YYCURSOR;
yy583:
#line 667 "../src/parse/lex.re"
	{ goto sourceline; }
#line 3528 "src/parse/lex.cc"
yy584:
	++YYCURSOR;
#line 665 "../src/parse/lex.re"
	{ tok = cur; return; }
#line 3533 "src/parse/lex.cc"
yy586:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy584;
	goto yy583;
yy587:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x00) goto yy583;
	if (yych == '\n') goto yy583;
	goto yy592;
yy588:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy588;
	}
#line 649 "../src/parse/lex.re"
	{
        uint32_t l;
        if (!s_to_u32_unsafe (tok, cur, l)) {
            fatal_lc(get_line(), get_column(), "line number overflow");
        }
        set_line(l);
        goto sourceline;
    }
#line 3559 "src/parse/lex.cc"
yy591:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy592:
	if (yybm[0+yych] & 128) {
		goto yy591;
	}
	if (yych <= '\n') goto yy593;
	if (yych <= '"') goto yy594;
	goto yy596;
yy593:
	YYCURSOR = YYMARKER;
	goto yy583;
yy594:
	++YYCURSOR;
#line 658 "../src/parse/lex.re"
	{
        std::string &name = get_input().escaped_name;
        name = getstr(tok + 1, cur - 1);
        strrreplace(name, "\\", "\\\\");
        goto sourceline;
    }
#line 3583 "src/parse/lex.cc"
yy596:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy593;
	if (yych == '\n') goto yy593;
	goto yy591;
}
#line 668 "../src/parse/lex.re"

}

void Scanner::fail_if_eof() const
{
    if (is_eof()) {
        const uint32_t col = static_cast<uint32_t>(cur - pos) - 1;
        fatal_lc(get_line(), col, "unexpected end of input");
    }
}

#undef YYCTYPE
#undef YYCURSOR
#undef YYLIMIT
#undef YYMARKER
#undef YYFILL

} // end namespace re2c
